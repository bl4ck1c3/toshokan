(function ($) {

  function getUmlautUpdater(openUrl, urlList, params) {
      
    var urls;
    try {
      urls = [JSON.parse(urlList)]; 
    } catch(e) {
      urls = [];
    }
    openUrl += "&rft_dat=" + encodeURIComponent(JSON.stringify({"user_type" : userType, "urls" : urls}));

    <% if Rails.env.development? %>
      openUrl += "&umlaut.force_new_request=true"
    <% end %>  

    if(typeof params === "object") {
      openUrl += "&"+$.param(params);
    }

    return new Umlaut.HtmlUpdater('<%= Toshokan::Application.config.umlaut[:url] %>', openUrl);
  }

  function getFulltextLinks(umlautHtml) {

    var linkList = $('<ul/>');
    $(umlautHtml).find(".response_item").each( function() {
    
      var a = $(this).find("a").first();    
      if(a.length) {
        var listElm = $("<li />");
        var type = /open access/gi.test(a.html()) ? "openaccess" : "licensed"; 
        var label = $(this).find(".response_notes").html();
        var link = $("<a/>", {
          text: a.html(),
          "class" : "fulltext " + type,
          "title": label,
          "href" : a.attr("href"),
          "data-toggle" : "tooltip"  
        });
        if(type == "openaccess") {
          $(link).prepend("<i class=\"icon-openaccess\"></i> ");
        } else {
          $(link).prepend("<i class=\"icon-download\"></i> ");
        }
        $(link).tooltip(); 
        link.appendTo(listElm);
        listElm.appendTo(linkList);
      }
    });
    return linkList;
  }

  $(function () {

    if($('body.blacklight-catalog-index').length) {
      $('.document').each(function() {

        var spin_opts = {
          length: 3,
          width: 2,
          radius: 4,
          left: 5,
          top: 0
        };
        
        var updater = getUmlautUpdater($(this).find(".Z3988").attr("title"), 
                                   $(this).find('.url_list').data('urls') || [], 
                                   {"umlaut.servicelist" : "fulltext"});

        var fulltextSelector = $(this).find(".fulltext");

        $(fulltextSelector).append().spin(spin_opts);  
        
        // fulltext links
        updater.add_section_target({
          umlaut_section_id: "fulltext",
          selector: fulltextSelector,
          before_update: function(html, count) {
            if(count==0) {
              $(html).html("<%= I18n.t('toshokan.tools.not_available') %>");
            } else {
              $(html).html(getFulltextLinks(html));  
              $(html).find("a").addClass("btn btn-small");
            }
            $(fulltextSelector).spin(false);
          },
          after_update: function(html, count) {
            $(html).replaceWith($(html).contents());  
          }
        });
        updater.update();
      });
    }
    else if($('body.blacklight-catalog-show').length) {

      var spin_opts = {
        length: 5,
        width: 3,
        radius: 6,
      };

      var updater = getUmlautUpdater($(".Z3988").attr("title"), $('#url_list').data('urls') || []);

      var fulltextHeader = ".fulltext-header";
      var nalHeader = "#nal-header";
      var nalSelector = "#nal-content";

      $(fulltextHeader).append().spin(spin_opts);

      // fulltext links
      updater.add_section_target({
        umlaut_section_id: "fulltext",
        selector: fulltextHeader,
        position: "after",
        before_update: function(html, count) {          
          if(count==0) {
            $(html).html("<%= I18n.t('toshokan.tools.not_available') %>");
          } else {
            $(html).html($(getFulltextLinks(html)).children());
          }
          $(fulltextHeader).spin(false);    
        },
        after_update: function(html, count) {
          $(html).replaceWith($(html).contents());  
        }     
      });

      // other libraries
      updater.add_section_target({
        umlaut_section_id: "nal",
        selector: nalSelector,
        before_update: function(html, count) {
          $(html).html($(html).find(".response_item"));
          $(html).find(".response_notes").remove();
          if(count > 0) {
            $(nalHeader).show();
          }
        }
      });
      updater.update();
    }
  });

  $(function () {
    $('#nal-content').on('show', function () {
      $('#nal-header').addClass('twiddle-open');
    })
    $('#nal-content').on('hide', function () {
      $('#nal-header').removeClass('twiddle-open');
    })
  });

})(jQuery);
